-- credits: dawid
local HttpService = game:GetService("HttpService")

local ConfigManager
ConfigManager = {
    Window = nil,
    Folder = nil,
    Path = nil,
    Configs = {},
    ConfigTab = nil,
    Elements = {},
    Parser = {
        Colorpicker = {
            Save = function(obj)
                return {
                    __type = obj.__type,
                    value = obj.Default:ToHex(),
                    transparency = obj.Transparency or nil,
                }
            end,
            Load = function(element, data)
                if element then
                    element:Update(Color3.fromHex(data.value), data.transparency or nil)
                end
            end
        },
        Dropdown = {
            Save = function(obj)
                return {
                    __type = obj.__type,
                    value = obj.Value,
                }
            end,
            Load = function(element, data)
                if element then
                    element:Select(data.value)
                end
            end
        },
        Input = {
            Save = function(obj)
                return {
                    __type = obj.__type,
                    value = obj.Value,
                }
            end,
            Load = function(element, data)
                if element then
                    element:Set(data.value)
                end
            end
        },
        Keybind = {
            Save = function(obj)
                return {
                    __type = obj.__type,
                    value = obj.Value,
                }
            end,
            Load = function(element, data)
                if element then
                    element:Set(data.value)
                end
            end
        },
        Slider = {
            Save = function(obj)
                return {
                    __type = obj.__type,
                    value = obj.Value.Default,
                }
            end,
            Load = function(element, data)
                if element then
                    element:Set(data.value)
                end
            end
        },
        Toggle = {
            Save = function(obj)
                return {
                    __type = obj.__type,
                    value = obj.Value,
                }
            end,
            Load = function(element, data)
                if element then
                    element:Set(data.value)
                end
            end
        },
    }
}

function ConfigManager:Init(Window)
    if not Window.Folder then
        warn("[ WindUI.ConfigManager ] Window.Folder is not specified.")
        
        return false
    end
    
    ConfigManager.Window = Window
    ConfigManager.Folder = Window.Folder
    ConfigManager.Path = "WindUI/" .. tostring(ConfigManager.Folder) .. "/config/"
    
    -- Create folder if it doesn't exist
    pcall(function()
        makefolder("WindUI")
        makefolder("WindUI/" .. tostring(ConfigManager.Folder))
        makefolder(ConfigManager.Path)
    end)

    -- Create Config Tab
    ConfigManager:CreateConfigTab()

    return ConfigManager
end

function ConfigManager:CreateConfigTab()
    if not ConfigManager.Window then
        warn("[ ConfigManager ] Window not initialized")
        return
    end

    -- Create Config Tab
    ConfigManager.ConfigTab = ConfigManager.Window:Tab({
        Title = "Config",
        Icon = "save",
        Locked = false,
    })

    -- Config Management Section
    ConfigManager.ConfigTab:Section({ Title = "Config Management", Icon = "save" })

    local configNameInput = ""
    local selectedConfigName = ""

    local configNameInputElement = ConfigManager.ConfigTab:Input({
        Title = "Config Name",
        Placeholder = "Enter config name",
        Value = "",
        Callback = function(text)
            configNameInput = text or ""
        end
    })

    local configsDropdown
    local function refreshConfigsList()
        local configs = ConfigManager:AllConfigs() or {}
        if configsDropdown then
            configsDropdown:Refresh(configs)
        end
        return configs
    end

    configsDropdown = ConfigManager.ConfigTab:Dropdown({
        Title = "Select Config",
        Multi = false,
        AllowNone = true,
        Value = "",
        Values = refreshConfigsList(),
        Callback = function(selectedConfig)
            selectedConfigName = selectedConfig or ""
            if selectedConfigName ~= "" then
                configNameInputElement:Set(selectedConfigName)
                configNameInput = selectedConfigName
            end
        end
    })

    ConfigManager.ConfigTab:Button({
        Title = "Save Config",
        Desc = "Save current settings to config file",
        Callback = function()
            if configNameInput ~= "" then
                local config = ConfigManager:CreateConfig(configNameInput)
                if config then
                    -- Register all elements
                    for name, element in pairs(ConfigManager.Elements) do
                        config:Register(name, element)
                    end
                    
                    local success, message = pcall(function()
                        config:Save()
                    end)
                    
                    if success then
                        ConfigManager.Window:Notify({
                            Title = "Config Saved",
                            Content = "Config '" .. configNameInput .. "' saved successfully!",
                            Duration = 3,
                        })
                        refreshConfigsList()
                    else
                        ConfigManager.Window:Notify({
                            Title = "Save Error",
                            Content = "Failed to save config: " .. tostring(message),
                            Duration = 3,
                        })
                    end
                else
                    ConfigManager.Window:Notify({
                        Title = "Save Error",
                        Content = "Failed to create config",
                        Duration = 3,
                    })
                end
            else
                ConfigManager.Window:Notify({
                    Title = "Save Error",
                    Content = "Please enter a config name first",
                    Duration = 3,
                })
            end
        end
    })

    ConfigManager.ConfigTab:Button({
        Title = "Load Config",
        Desc = "Load settings from selected config file",
        Callback = function()
            if selectedConfigName ~= "" then
                local config = ConfigManager:CreateConfig(selectedConfigName)
                if config then
                    -- Register all elements
                    for name, element in pairs(ConfigManager.Elements) do
                        config:Register(name, element)
                    end
                    
                    local success, message = pcall(function()
                        config:Load()
                    end)
                    
                    if success then
                        ConfigManager.Window:Notify({
                            Title = "Config Loaded",
                            Content = "Config '" .. selectedConfigName .. "' loaded successfully!",
                            Duration = 3,
                        })
                    else
                        ConfigManager.Window:Notify({
                            Title = "Load Error",
                            Content = "Failed to load config: " .. tostring(message),
                            Duration = 3,
                        })
                    end
                else
                    ConfigManager.Window:Notify({
                        Title = "Load Error",
                        Content = "Failed to create config instance",
                        Duration = 3,
                    })
                end
            else
                ConfigManager.Window:Notify({
                    Title = "Load Error",
                    Content = "Please select a config first",
                    Duration = 3,
                })
            end
        end
    })

    ConfigManager.ConfigTab:Button({
        Title = "Delete Config",
        Desc = "Delete selected config file",
        Callback = function()
            if selectedConfigName ~= "" then
                local filePath = ConfigManager.Path .. selectedConfigName .. ".json"
                
                if isfile(filePath) then
                    local success, message = pcall(function()
                        delfile(filePath)
                    end)
                    
                    if success then
                        ConfigManager.Window:Notify({
                            Title = "Config Deleted",
                            Content = "Config '" .. selectedConfigName .. "' deleted successfully!",
                            Duration = 3,
                        })
                        selectedConfigName = ""
                        configNameInput = ""
                        configNameInputElement:Set("")
                        refreshConfigsList()
                    else
                        ConfigManager.Window:Notify({
                            Title = "Delete Error",
                            Content = "Failed to delete config: " .. tostring(message),
                            Duration = 3,
                        })
                    end
                else
                    ConfigManager.Window:Notify({
                        Title = "Delete Error",
                        Content = "Config file not found",
                        Duration = 3,
                    })
                end
            else
                ConfigManager.Window:Notify({
                    Title = "Delete Error",
                    Content = "Please select a config first",
                    Duration = 3,
                })
            end
        end
    })

    ConfigManager.ConfigTab:Button({
        Title = "Refresh Config List",
        Desc = "Refresh the list of available configs",
        Callback = function()
            local configs = refreshConfigsList()
            ConfigManager.Window:Notify({
                Title = "List Refreshed",
                Content = "Found " .. #configs .. " config files",
                Duration = 2,
            })
        end
    })
end

function ConfigManager:Register(Name, Element)
    if not Element then
        warn("[ ConfigManager ] Element is nil for:", Name)
        return
    end
    
    ConfigManager.Elements[Name] = Element
end

function ConfigManager:CreateConfig(configFilename)
    local ConfigModule = {
        Path = ConfigManager.Path .. configFilename .. ".json",
        
        Elements = {}
    }
    
    if not configFilename then
        return false, "No config file is selected"
    end

    function ConfigModule:Register(Name, Element)
        ConfigModule.Elements[Name] = Element
    end
    
    function ConfigModule:Save()
        local saveData = {
            Elements = {}
        }
        
        for name,i in next, ConfigModule.Elements do
            if ConfigManager.Parser[i.__type] then
                saveData.Elements[tostring(name)] = ConfigManager.Parser[i.__type].Save(i)
            end
        end
        
        print(HttpService:JSONEncode(saveData))
        
        writefile(ConfigModule.Path, HttpService:JSONEncode(saveData))
    end
    
    function ConfigModule:Load()
        if not isfile(ConfigModule.Path) then return false, "Invalid file" end
        
        local loadData = HttpService:JSONDecode(readfile(ConfigModule.Path))
        
        for name, data in next, loadData.Elements do
            if ConfigModule.Elements[name] and ConfigManager.Parser[data.__type] then
                task.spawn(function()
                    ConfigManager.Parser[data.__type].Load(ConfigModule.Elements[name], data)
                end)
            end
        end
        
    end
    
    
    ConfigManager.Configs[configFilename] = ConfigModule
    
    return ConfigModule
end

function ConfigManager:AllConfigs()
    if listfiles then
        local files = {}
        for _, file in next, listfiles(ConfigManager.Path) do
            local name = file:match("([^\\/]+)%.json$")
            if name then
                table.insert(files, name)
            end
        end
        
        return files
    end
    return false
end

return ConfigManager
